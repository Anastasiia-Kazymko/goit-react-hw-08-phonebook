{"version":3,"file":"static/js/143.e567ba40.chunk.js","mappings":"yOAAaA,EAAc,SAAAC,GAAK,OAAIA,EAAMC,SAASA,QAAnB,E,sCCGnBC,GAAcC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,gMAWXE,GAAQF,EAAAA,EAAAA,IAAOG,EAAAA,GAAPH,CAAH,yCAGLI,EAAYJ,EAAAA,GAAAA,OAAH,6O,UCVlBK,EAASC,EAAAA,KAAaC,MAAM,CAC9BC,KAAMF,EAAAA,KAAaG,WACnBC,MAAOJ,EAAAA,KAAaG,aAGTE,EAAc,WACzB,IAKMC,GAAWC,EAAAA,EAAAA,MACXf,GAAWgB,EAAAA,EAAAA,IAAYlB,GAY7B,OACE,SAAC,KAAD,CACEmB,cApBkB,CACpBP,KAAM,GACNE,MAAO,IAmBLM,iBAAkBX,EAClBY,SAdiB,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UACtBX,EAASU,EAATV,KAER,GADqBV,EAASsB,MAAK,SAAAC,GAAO,OAAIA,EAAQb,OAASA,CAArB,IAExC,OAAOc,MAAM,GAAD,OAAId,EAAJ,4BAEdI,EAASW,EAAAA,EAAAA,WAA8BL,IACvCC,GACD,EAGC,UAKE,UAACpB,EAAD,YACE,kCACA,SAACG,EAAD,CACEsB,KAAK,OACLhB,KAAK,OACLiB,QAAQ,yHACRC,MAAM,yIACNjB,UAAQ,KAEV,SAAC,KAAD,CAAcD,KAAK,UACnB,oCACA,SAACN,EAAD,CACEsB,KAAK,QACLhB,KAAK,QACLiB,QAAQ,yFACRC,MAAM,+FACNjB,UAAQ,KAEV,SAAC,KAAD,CAAcD,KAAK,WACnB,SAACJ,EAAD,CAAWoB,KAAK,SAAhB,6BAIP,E,6BC1DYG,EAAO3B,EAAAA,GAAAA,GAAH,wCAIJ4B,EAAY5B,EAAAA,GAAAA,OAAH,kOCET6B,EAAc,WACzB,IAAMjB,GAAWC,EAAAA,EAAAA,MACXiB,GAAShB,EAAAA,EAAAA,IAAYiB,EAAAA,IACrBjC,GAAWgB,EAAAA,EAAAA,IAAYlB,GACrBoC,EAAkBT,EAAAA,EAAAA,cAEpBU,EAAc,OAAGnC,QAAH,IAAGA,OAAH,EAAGA,EAAUgC,QAAO,SAAAT,GAAO,OAC7CA,EAAQb,KAAK0B,cAAcC,SAASL,EAAOI,cADE,IAS/C,OACE,wBACGpC,GACCmC,EAAeG,KAAI,gBAAGC,EAAH,EAAGA,GAAI7B,EAAP,EAAOA,KAAME,EAAb,EAAaA,MAAb,OACjB,UAACiB,EAAD,WACGnB,EADH,KACWE,GACT,SAACkB,EAAD,CAAWJ,KAAK,SAASc,QAAS,kBAXpB,SAAAD,GACtBzB,EAASoB,EAAcK,IACvBE,IAAAA,OAAAA,QAAwB,iCACzB,CAQiDC,CAAgBH,EAAtB,EAAlC,sBAFSA,EADM,KAU1B,EClCYI,EAAczC,EAAAA,GAAAA,MAAH,mGCEX0C,EAAS,WACpB,IAAMZ,GAAShB,EAAAA,EAAAA,IAAYiB,EAAAA,IACrBnB,GAAWC,EAAAA,EAAAA,MAEjB,OACE,iCACE,kDACA,SAAC4B,EAAD,CACEjB,KAAK,OACLhB,KAAK,SACLmC,MAAOb,EACPc,SAAU,SAAAC,GAAC,OAAIjC,GAASkC,EAAAA,EAAAA,IAAiBD,EAAEE,OAAOJ,OAAvC,MAIlB,ECjBYK,EAAYhD,EAAAA,GAAAA,IAAH,6FAKTiD,EAAQjD,EAAAA,GAAAA,GAAH,yGCSlB,EAVsB,kBACpB,UAACgD,EAAD,YACE,SAACC,EAAD,yBACA,SAACtC,EAAD,KACA,sCACA,SAAC+B,EAAD,KACA,SAACb,EAAD,MANkB,C","sources":["redux/contacts/contacts-selectors.js","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","views/PhonebookView/PhonebookView.styled.js","views/PhonebookView/PhonebookView.js"],"sourcesContent":["export const getContacts = state => state.contacts.contacts;\nexport const getStatus = state => state.contacts.status;\nexport const getError = state => state.contacts.error;\n","import styled from 'styled-components';\nimport { Form, Field } from 'formik';\n\nexport const FormWrapper = styled(Form)`\n  padding: 15px 10px;\n  width: 210px;\n  height: 190px;\n  border: none;\n  border-radius: 10px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nexport const Input = styled(Field)`\n  width: 200px;\n`;\nexport const AddButton = styled.button`\n  margin-top: 10px;\n  background-color: #ff4500;\n  width: 94px;\n  height: 37px;\n\n  transition: background-color 250ms linear;\n  &:hover,\n  &:focus {\n    background-color: #dd3b00;\n    color: white;\n  }\n`;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { contactsOperations } from 'redux/contacts';\nimport { getContacts } from 'redux/contacts/contacts-selectors';\nimport { Formik, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\nimport { FormWrapper, AddButton, Input } from './ContactForm.styled';\n\nlet schema = yup.object().shape({\n  name: yup.string().required(),\n  phone: yup.number().required(),\n});\n\nexport const ContactForm = () => {\n  const initialValues = {\n    name: '',\n    phone: '',\n  };\n\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n\n  const handleSubmit = (values, { resetForm }) => {\n    const { name } = values;\n    const addedСontank = contacts.find(contact => contact.name === name);\n    if (addedСontank) {\n      return alert(`${name} is already in contacts`);\n    }\n    dispatch(contactsOperations.addContact(values));\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={schema}\n      onSubmit={handleSubmit}\n    >\n      <FormWrapper>\n        <h3>Name</h3>\n        <Input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n        <ErrorMessage name=\"name\" />\n        <h3>Number</h3>\n        <Input\n          type=\"phone\"\n          name=\"phone\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n        <ErrorMessage name=\"phone\" />\n        <AddButton type=\"submit\">Add contact</AddButton>\n      </FormWrapper>\n    </Formik>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Item = styled.li`\n  margin: 5px;\n`;\n\nexport const DelButton = styled.button`\n  outline: none;\n  margin-left: 5px;\n  border: 1px solid grey;\n  background-color: white;\n  transition: background-color 250ms linear;\n  &:hover,\n  &:focus {\n    background-color: #0088ff;\n  }\n`;\n","import { useSelector } from 'react-redux';\nimport Notiflix from 'notiflix';\nimport { useDispatch } from 'react-redux';\nimport { contactsOperations } from 'redux/contacts/index';\nimport { getFilter } from 'redux/filterSlise';\nimport { getContacts } from 'redux/contacts/contacts-selectors';\nimport { Item, DelButton } from './ContactList.styled';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(getFilter);\n  const contacts = useSelector(getContacts);\n  const { deleteContact } = contactsOperations;\n\n  const filterContacts = contacts?.filter(contact =>\n    contact.name.toLowerCase().includes(filter.toLowerCase())\n  );\n\n  const onDeleteContact = id => {\n    dispatch(deleteContact(id));\n    Notiflix.Notify.success('Сontact removed from list');\n  };\n\n  return (\n    <ul>\n      {contacts &&\n        filterContacts.map(({ id, name, phone }) => (\n          <Item key={id}>\n            {name}: {phone}\n            <DelButton type=\"button\" onClick={() => onDeleteContact(id)}>\n              Delete\n            </DelButton>\n          </Item>\n        ))}\n    </ul>\n  );\n};\n","import styled from 'styled-components';\n\nexport const FilterInput = styled.input`\n  margin-top: 10px;\n  width: 250px;\n  height: 30px;\n  font-size: 24px;\n`;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { filteredContacts, getFilter } from 'redux/filterSlise';\nimport { FilterInput } from './Filter.styled';\n\nexport const Filter = () => {\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      <p>Find contacts by name</p>\n      <FilterInput\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        onChange={e => dispatch(filteredContacts(e.target.value))}\n      />\n    </>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n`;\nexport const Title = styled.h1`\n  text-align: center;\n  font-size: 36px;\n  margin-top: 50px;\n  color: black;\n`;\n","import React from 'react';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { Container, Title } from './PhonebookView.styled';\n\nconst PhonebookView = () => (\n  <Container>\n    <Title>Phonebook</Title>\n    <ContactForm />\n    <h2>Contacts</h2>\n    <Filter />\n    <ContactList />\n  </Container>\n);\n\nexport default PhonebookView;\n"],"names":["getContacts","state","contacts","FormWrapper","styled","Form","Input","Field","AddButton","schema","yup","shape","name","required","phone","ContactForm","dispatch","useDispatch","useSelector","initialValues","validationSchema","onSubmit","values","resetForm","find","contact","alert","contactsOperations","type","pattern","title","Item","DelButton","ContactList","filter","getFilter","deleteContact","filterContacts","toLowerCase","includes","map","id","onClick","Notiflix","onDeleteContact","FilterInput","Filter","value","onChange","e","filteredContacts","target","Container","Title"],"sourceRoot":""}